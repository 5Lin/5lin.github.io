<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Lin&#39;s Blog | MuMu&#39;s Blog</title>
    <link>https://5Lin.github.io/posts/</link>
    <description>Recent content in Posts on Lin&#39;s Blog | MuMu&#39;s Blog</description>
    <image>
      <title>Lin&#39;s Blog | MuMu&#39;s Blog</title>
      <url>https://5Lin.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://5Lin.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Feb 2023 23:41:41 +0800</lastBuildDate><atom:link href="https://5Lin.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java的jdk环境变量手动配置</title>
      <link>https://5Lin.github.io/posts/java%E7%9A%84jdk%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 26 Feb 2023 23:41:41 +0800</pubDate>
      
      <guid>https://5Lin.github.io/posts/java%E7%9A%84jdk%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE/</guid>
      <description>java的jdk环境变量手动配置（Windows11）
参考：https://blog.csdn.net/JUSTLOVEBOY/article/details/119373550
由于经常要配置环境变量那些，由于冲突或者不小心，可能会把原来配置的弄掉，又要重新配置，所以索性记录一下 第一次没有配置好不要着急，多试几次就好了，多配置几次你就会很熟悉了，正所谓万事开头难不用担心，仅仅配置了JDK，没有JRE！
以下是步骤： 鼠标右键 “此电脑” 选择属性，之后会出现一个弹窗，点击 “高级系统设置”
如下图：
点击 “环境变量” 然后会看到这样的画面： 关键是下面的内容，用户变量可以不用管：
至此你已经完成了所有的准备步骤，接下来就是环境配置了： 1.点击“新建”会出现一个弹窗： 变量名：JAVA_HOME 变量值：C:\Program Files\Java\jdk1.8.0_162(JDK的安装路径，这里以你自己的安装路径为准) 输入完成之后点确认，第一项配置就完成了，接下来进行第二步
2.新建CLASSPATH 变量，变量值为： .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar(注意前面是有一个点的)，配置好之后如下图，这里是可以复制粘贴的。 然后点确定保存变量，进入第三步
3.配置path,找到path，双击或者点编辑 然后可以看到path里面已经有很多内容了，我们在最后面新建一个： 输入 %JAVA_HOME%\bin 然后点确定保存，出去之后再点确定，然后再点确定，至此环境变量配置完毕，接下来就是测试环境变量配置有没有问题了。注意：一定是三次点击确认</description>
    </item>
    
    <item>
      <title>Hello,world</title>
      <link>https://5Lin.github.io/posts/helloworld/</link>
      <pubDate>Sun, 26 Feb 2023 23:00:58 +0800</pubDate>
      
      <guid>https://5Lin.github.io/posts/helloworld/</guid>
      <description>Hello,world!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://5Lin.github.io/posts/c%E8%AF%AD%E8%A8%80%E4%B8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://5Lin.github.io/posts/c%E8%AF%AD%E8%A8%80%E4%B8%80/</guid>
      <description>**温馨提示：**所有的笔记（需要使用Typora软件打开）在视频下方简介中直接获取，纯个人录制，不用加什么公众号这些，各位小伙伴直接网盘自取吧。
计算机思维导论 计算机自1946年问世以来，几乎改变了整个世界。
现在我们可以通过电脑来做很多事情，比如我们常常听到的什么人工智能、电子竞技、大数据等等，都和计算机息息相关，包括我们现在的手机、平板等智能设备，也是计算机转变而来的。各位可以看看最顶上的这张图片，如果你在小时候接触过计算机，那么一定对这张图片（照片拍摄于1996年，在美国加利福尼亚州加利福尼亚州的锁诺玛县）印象深刻，这张壁纸作为WindowsXP系统的默认壁纸，曾经展示在千家万户的电脑屏幕上。
也许你没有接触过计算机，也许你唯一接触计算机就是用来打游戏，也有可能你曾经捣鼓过计算机，在学习C语言之前，先让我们来了解一下计算机的世界。
计算机的世界 计算机虽然名字听着很高级，不过它也是由一个个简单电路组成的。
这是我们在初中就学习过的电路图，不过这种电路太过简单，只能完成一些很基础的的操作，比如点亮小灯泡等。
很明显想要实现计算机怎么高级的运算机器，肯定是做不到的，这时我们就需要引入更加强大的数字电路了。
用数字信号完成对数字量进行算术运算和逻辑运算的电路称为数字电路，或数字系统。由于它具有逻辑运算和逻辑处理功能，所以又称数字逻辑电路。现代的数字电路由半导体工艺制成的若干数字集成器件构造而成。逻辑门是数字逻辑电路的基本单元。
计算机专业一般会在大一开放《数字电路》这门课程，会对计算机底层的数字电路实现原理进行详细介绍。
数字电路引入了逻辑判断，我们来看看简单的数字电路：
数字电路中，用电压的高低来区分出两种信号，低电压表示0，高电压表示1，由于只能通过这种方式表示出两种类型的信号，所以计算机采用的是二进制。
二进制是计算技术中广泛采用的一种数制。二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。
比如我们一般采用的都是十进制表示，比如9再继续加1的话，就需要进位了，变成10，在二进制中，因为只有0和1，所以当1继续加1时，就需要进位了，就变成10了（注意这不是十，读成一零就行了）
当然，仅仅有两种信号还不够，我们还需要逻辑门来辅助我们完成更多的计算，最基本的逻辑关系是与、或、非，而逻辑门就有相应的是与门、或门和非门，可以用电阻、电容、二极管、三极管等分立原件构成（具体咋构成的咱这里就不说了）
比如与操作，因为只有两种类型，我们一般将1表示为真，0表示为假，与操作（用&amp;amp;表示）要求两个数参与进来，比如：
1 &amp;amp; 1 = 1 必须两边都是真，结果才为真。 1 &amp;amp; 0 = 0 两边任意一个或者都不是真，结果为假。 或运算（用 | 表示）：
1 | 0 = 1 两边只要有一个为真，结果就为真 0 | 0 = 0 两边同时为假，结果才是假 非运算实际上就是取反操作（可以是 ! 表示）
!1 = 0 !0 = 1 非运算会将真变成假，假变成真 有了这些运算之后，我们的电路不仅仅可以实现计算，也可以实现各种各样的逻辑判断，最终才能发展成我们的计算机。
前面我们大概介绍一下计算机的底层操作原理，接着我们来看看计算机的基本组成。
相信各位熟知的计算机都是一个屏幕+一个主机的形式，然后配上我们的键盘鼠标，就可以开始使用了，但是实际上标准的计算机结构并没有这么简单，我们来看看：
我们电脑最核心的部件，当属CPU，因为几乎所有的运算都是依靠CPU进行（各种各样的计算电路已经在CPU中安排好了，我们只需要发送对应的指令就可以进行对应的运算），它就像我们人的大脑一样，有了大脑才能进行思考。不过光有大脑还不行，还要有一些其他的部分来辅助工作，比如我们想向电脑里面打字，那么就需要连接一个键盘才能输入，我们想要点击桌面上的图标，那么就需要一个鼠标来操作光标，这些都是输入设备。我们的电脑开机之后显示器上会显示出画面，实际上显示器就是输出设备。
当然除了这些内容之外，我们的电脑还需要内存来保存运行时的一些数据，以及外存来保存文件（比如硬盘）等。我们常说的iPhone13 512G，这个512G并不是指的内存，而是指的外存，准确的说是用于存放文件硬盘大小，而真正的内存是我们常说的4G/6G/8G运行内存，内存的速度远高于外存的速度，所以1G内存的价格远超1G硬盘的价格。
计算机包括五大部件：运算器、控制器、存储器、输入和输出设备。有了这一套完整的硬件环境，我们的电脑才算是有了一个完整的身体。
**问题：**我们上面提到的这些硬件设备哪些是属于外设？
操作系统概述 前面我们了解了一下计算机的大致原理和组成结构，但是光有这一套硬件可不行，如何让这一套硬件按照我们想要的方式运作起来，也是非常重要的，这时我们就需要介绍操作系统了。
操作系统（operating system，简称OS）是管理计算机硬件与软件资源的计算机程序。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互操作的界面。
一般在计算机专业大二，会开放《操作系统》课程，会详细讲解操作系统的底层运作机制和调度。
一般我们电脑上都安装了Windows操作系统（苹果笔记本安装的是MacOS操作系统），现在主流的电脑都已经预装Windows11了：
有了操作系统，我们的电脑才能真正运行起来，我们就可以轻松地通过键盘和鼠标来操作电脑了。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://5Lin.github.io/posts/c%E8%AF%AD%E8%A8%80%E4%B8%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://5Lin.github.io/posts/c%E8%AF%AD%E8%A8%80%E4%B8%89/</guid>
      <description>C语言高级特性 前面我们了解了C语言的相关基础内容，我们来看看C语言的高级部分。这一章的学习难道会比较大，尤其是指针板块，因为需要理解计算机内存模型，所以说是很多初学者的噩梦。
函数 其实函数我们在一开始就在使用了：
int main() { //这是定义函数 ... } 我们程序的入口点就是main函数，我们只需要将我们的程序代码编写到主函数中就可以运行了，不够这个函数只是由我们来定义，而不是我们自己来调用。当然，除了主函数之外，我们一直在使用的printf也是一个函数，不过这个函数是标准库中已经实现好了的，现在是我们在调用这个函数：
printf(&amp;#34;Hello World!&amp;#34;); //直接通过 函数名称(参数...) 的形式调用函数 那么，函数的具体定义是什么呢？
函数是完成特定任务的独立程序代码单元。
其实简单来说，函数时为了完成某件任务而生的，可能我们要完成某个任务并不是一行代码就可以搞定的，但是现在可能会遇到这种情况：
#include &amp;lt;stdio.h&amp;gt; int main() { int a = 10; printf(&amp;#34;H&amp;#34;); //比如下面这三行代码就是我们要做的任务 printf(&amp;#34;A&amp;#34;); a += 10; if(a &amp;gt; 20) { printf(&amp;#34;H&amp;#34;); //这里我们还需要执行这个任务 printf(&amp;#34;A&amp;#34;); a += 10; } switch (a) { case 30: printf(&amp;#34;H&amp;#34;); //这里又要执行这个任务 printf(&amp;#34;A&amp;#34;); a += 10; } } 我们每次要做这个任务时，都要完完整整地将任务的每一行代码都写下来，如果我们的程序中多处都需要执行这个任务，每个地方都完整地写一遍，实在是太臃肿了，有没有一种更好的办法能优化我们的代码呢？
这时我们就可以考虑使用函数了，我们可以将我们的程序逻辑代码全部编写到函数中，当我们执行函数时，实际上执行的就是函数中的全部内容，也就是按照我们制定的规则执行对应的任务，每次需要做这个任务时，只需要调用函数即可。
我们来看看，如何创建和使用函数。
创建和使用函数 首先我们来看看如何创建一个函数，其实创建一个函数是很简单的，格式如下：
返回值类型 函数名称([函数参数...]); 其中函数名称也是有要求的，并不是所有的字符都可以用作函数名称，它的命名规则与变量的命名规则基本一致，所以这里就不一一列出了。
函数不仅仅需要完成我们的任务，可能某些函数还需要告诉我们结果，比如我们之前认识的getchar函数，这个函数实际上返回了一个int值作为结果（也就是我们输入的字符）我们同样可以将函数返回的结果赋值给变量或是参与运算等等。
当然如果我们的函数只需要完成任务，不需要告诉我们结果，返回值类型可以写成void表示为空。
函数参数我们放在下一个小节中讲解，所以这里我们不使用任何参数，所以这里也将参数设定为void表示没有参数（当然为了方便，我们也可以直接什么都不写）</description>
    </item>
    
    <item>
      <title></title>
      <link>https://5Lin.github.io/posts/c%E8%AF%AD%E8%A8%80%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://5Lin.github.io/posts/c%E8%AF%AD%E8%A8%80%E4%BA%8C/</guid>
      <description>C语言基础 前面我们已经搭建好了基本的学习环境，现在就让我们开始C语言的学习吧！
C语言的语法层面内容相比其他语言来说，其实算少的了，但是它的难点在于很多概念上的理解，这也是为什么上一章一直在说一些计算机基础相关内容（包括这一章还会继续补一点），这样会有助于各位对于语言的理解，C语言可以说是步入编程领域的分水岭，跨过了这道坎，后续其他编程语言的学习都会无比轻松。
学习编程的过程可能会很枯燥，但是请各位一定不要心急，一步一个脚印，相信大家一定能通关。
C程序基本格式 前面我们在创建项目之后自动生成了一个.c文件，这个就是我们编写的程序代码文件：
#include &amp;lt;stdio.h&amp;gt; int main() { printf(&amp;#34;Hello World!&amp;#34;); return 0; } 操作系统需要执行我们的程序，但是我们的程序中可能写了很多很多的代码，那么肯定需要知道从哪里开始执行才可以，也就是程序的入口，所以我们需要提供一个入口点，我们的C语言程序入口点就是main函数（不过现在还没有讲到函数，所以各位就理解为固定模式即可）它的写法是：
int main() { //所有的符号一律采用英文的，别用中文 程序代码... } 注意是int后面空格跟上main()，我们的程序代码使用花括号{}进行囊括（有的人为了方便查阅，会把前半个花括号写在下面）
然后我们看到，如果我们需要打印一段话到控制台，那么就需要使用printf(内容)来完成，这其实就是一种函数调用，但是现在我们还没有接触到，我们注意到括号里面的内容就是我们要打印到控制台的内容：
printf(&amp;#34;Hello World!&amp;#34;); //注意最后需要添加;来结束这一行，注意是英文的分号，不是中文的！ 我们要打印的内容需要采用双引号进行囊括，被双引号囊括的这一端话，我们称为字符串，当然我们现在还没有学到，所以各位也是记固定模式就好，当我们需要向控制台打印一段话时，就要用双引号囊括这段话，然后放入printf即可。我们会在后续的学习中逐渐认识printf函数。
最顶上还有一句：
#include &amp;lt;stdio.h&amp;gt; 这个是引入系统库为我们提供的函数，包括printf在内，所以我们以后编写一个C语言程序，就按照固定模式：
#include &amp;lt;stdio.h&amp;gt; int main() { 程序代码 } 除了程序代码部分我们会进行编写之外，其他的地方采用固定模式就好。
我们在写代码的过程中可以添加一些注释文本，这些文本内容在编译时自动忽略，所以比如我们想边写边记点笔记，就可以添加注释，注释的格式为：
#include &amp;lt;stdio.h&amp;gt; //引入标准库头文件 int main() { //主函数，程序的入口点 printf(&amp;#34;Hello World!&amp;#34;); //向控制台打印字符串 } 当然我们也可以添加多行注释：
#include &amp;lt;stdio.h&amp;gt; /* * 这是由IDE自动生成的测试代码 * 还是可以的 */ int main() { printf(&amp;#34;Hello World!&amp;#34;); //最后还有一句 return 0; 但是我们可以不用写，编译器会自动添加，所以后面讲到之后我们再来说说这玩意。 } OK，基本的一些内容就讲解完毕了。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E4%B8%80%E9%87%8D%E5%88%B6%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E4%B8%80%E9%87%8D%E5%88%B6%E7%89%88/</guid>
      <description>新手入门篇 **注意：**开始学习JavaSE之前建议学习的前置课程《C语言程序设计》《数据结构》《操作系统》《计算机组成原理》
欢迎各位小伙伴来到JavaSE视频教程，期待与各位小伙伴共度这一旅程！视频中所有的文档、资料，都可以直接在视频下方简介中找到，视频非培训机构出品，纯个人录制，不需要加任何公众号、小程序，直接自取即可。
教程开始之前，提醒各位小伙伴：
如果你对某样东西不熟悉，请务必保证跟视频中使用一模一样的环境、一模一样的操作方式去使用，不要自作主张，否则出现某些奇怪的问题又不知道怎么办，就会浪费很多时间。 视频依然是基于Java 8进行讲解，不要自己去安装一个其他的版本，想要了解新版本特性可以在另一个视频里面观看。 在学习过程中，尽可能避免出现中文文件夹，包括后面的环境安装、项目创建，都尽量不要放在中文路径下（因为使用中文常常出现奇奇怪怪的问题）建议使用对应的英文单词代替，或者是用拼音都可以，最好只出现英文字母和数字。 本系列教程使用 IDEA社区版（免费）即可，不需要申请终极版。 如果觉得本视频对你有帮助，请一键三连支持一下UP主！
计算机思维导论 计算机自1946年问世以来，几乎改变了整个世界。
现在我们可以通过电脑来做很多事情，比如我们常常听到的什么人工智能、电子竞技、大数据等等，都和计算机息息相关，包括我们现在的手机、平板等智能设备，也是计算机转变而来的。各位可以看看最顶上的这张图片，如果你在小时候接触过计算机，那么一定对这张图片（照片拍摄于1996年，在美国加利福尼亚州加利福尼亚州的锁诺玛县）印象深刻，这张壁纸作为WindowsXP系统的默认壁纸，曾经展示在千家万户的电脑屏幕上。
也许你没有接触过计算机，也许你唯一接触计算机就是用来打游戏，也有可能你曾经捣鼓过计算机，在学习C语言之前，先让我们来了解一下计算机的世界。
计算机的世界 **注意：**如果你已经完成了《C语言程序设计》视频教程的学习，可以直接跳过此部分。
计算机虽然名字听着很高级，不过它也是由一个个简单电路组成的。
这是我们在初中就学习过的电路图，不过这种电路太过简单，只能完成一些很基础的的操作，比如点亮小灯泡等。
很明显想要实现计算机怎么高级的运算机器，肯定是做不到的，这时我们就需要引入更加强大的数字电路了。
用数字信号完成对数字量进行算术运算和逻辑运算的电路称为数字电路，或数字系统。由于它具有逻辑运算和逻辑处理功能，所以又称数字逻辑电路。现代的数字电路由半导体工艺制成的若干数字集成器件构造而成。逻辑门是数字逻辑电路的基本单元。
计算机专业一般会在大一开放《数字电路》这门课程，会对计算机底层的数字电路实现原理进行详细介绍。
数字电路引入了逻辑判断，我们来看看简单的数字电路：
数字电路中，用电压的高低来区分出两种信号，低电压表示0，高电压表示1，由于只能通过这种方式表示出两种类型的信号，所以计算机采用的是二进制。
二进制是计算技术中广泛采用的一种数制。二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。
比如我们一般采用的都是十进制表示，比如9再继续加1的话，就需要进位了，变成10，在二进制中，因为只有0和1，所以当1继续加1时，就需要进位了，就变成10了（注意这不是十，读成一零就行了）
当然，仅仅有两种信号还不够，我们还需要逻辑门来辅助我们完成更多的计算，最基本的逻辑关系是与、或、非，而逻辑门就有相应的是与门、或门和非门，可以用电阻、电容、二极管、三极管等分立原件构成（具体咋构成的咱这里就不说了）
比如与操作，因为只有两种类型，我们一般将1表示为真，0表示为假，与操作（用&amp;amp;表示）要求两个数参与进来，比如：
1 &amp;amp; 1 = 1 必须两边都是真，结果才为真。
1 &amp;amp; 0 = 0 两边任意一个或者都不是真，结果为假。
或运算（用 | 表示）：
1 | 0 = 1 两边只要有一个为真，结果就为真
0 | 0 = 0 两边同时为假，结果才是假
非运算实际上就是取反操作（可以是 ! 表示）
!1 = 0
!0 = 1 非运算会将真变成假，假变成真
有了这些运算之后，我们的电路不仅仅可以实现计算，也可以实现各种各样的逻辑判断，最终才能发展成我们的计算机。
前面我们大概介绍一下计算机的底层操作原理，接着我们来看看计算机的基本组成。
相信各位熟知的计算机都是一个屏幕+一个主机的形式，然后配上我们的键盘鼠标，就可以开始使用了，但是实际上标准的计算机结构并没有这么简单，我们来看看：
我们电脑最核心的部件，当属CPU，因为几乎所有的运算都是依靠CPU进行（各种各样的计算电路已经在CPU中安排好了，我们只需要发送对应的指令就可以进行对应的运算），它就像我们人的大脑一样，有了大脑才能进行思考。不过光有大脑还不行，还要有一些其他的部分来辅助工作，比如我们想向电脑里面打字，那么就需要连接一个键盘才能输入，我们想要点击桌面上的图标，那么就需要一个鼠标来操作光标，这些都是输入设备。我们的电脑开机之后显示器上会显示出画面，实际上显示器就是输出设备。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E4%B8%83%E9%87%8D%E5%88%B6%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E4%B8%83%E9%87%8D%E5%88%B6%E7%89%88/</guid>
      <description>多线程与反射 前面我们已经讲解了JavaSE的大部分核心内容，最后一章，我们还将继续学习JavaSE中提供的各种高级特性。这些高级特性对于我们之后的学习，会有着举足轻重的作用。
多线程 **注意：**本章节会涉及到 操作系统 相关知识。
在了解多线程之前，让我们回顾一下操作系统中提到的进程概念：
进程是程序执行的实体，每一个进程都是一个应用程序（比如我们运行QQ、浏览器、LOL、网易云音乐等软件），都有自己的内存空间，CPU一个核心同时只能处理一件事情，当出现多个进程需要同时运行时，CPU一般通过时间片轮转调度算法，来实现多个进程的同时运行。
在早期的计算机中，进程是拥有资源和独立运行的最小单位，也是程序执行的最小单位。但是，如果我希望两个任务同时进行，就必须运行两个进程，由于每个进程都有一个自己的内存空间，进程之间的通信就变得非常麻烦（比如要共享某些数据）而且执行不同进程会产生上下文切换，非常耗时，那么能否实现在一个进程中就能够执行多个任务呢？
后来，线程横空出世，一个进程可以有多个线程，线程是程序执行中一个单一的顺序控制流程，现在线程才是程序执行流的最小单元，各个线程之间共享程序的内存空间（也就是所在进程的内存空间），上下文切换速度也高于进程。
在Java中，我们从开始，一直以来编写的都是单线程应用程序（运行main()方法的内容），也就是说只能同时执行一个任务（无论你是调用方法、还是进行计算，始终都是依次进行的，也就是同步的），而如果我们希望同时执行多个任务（两个方法同时在运行或者是两个计算同时在进行，也就是异步的），就需要用到Java多线程框架。实际上一个Java程序启动后，会创建很多线程，不仅仅只运行一个主线程：
public static void main(String[] args) { ThreadMXBean bean = ManagementFactory.getThreadMXBean(); long[] ids = bean.getAllThreadIds(); ThreadInfo[] infos = bean.getThreadInfo(ids); for (ThreadInfo info : infos) { System.out.println(info.getThreadName()); } } 关于除了main线程默认以外的线程，涉及到JVM相关底层原理，在这里不做讲解，了解就行。
线程的创建和启动 通过创建Thread对象来创建一个新的线程，Thread构造方法中需要传入一个Runnable接口的实现（其实就是编写要在另一个线程执行的内容逻辑）同时Runnable只有一个未实现方法，因此可以直接使用lambda表达式：
@FunctionalInterface public interface Runnable { /** * When an object implementing interface &amp;lt;code&amp;gt;Runnable&amp;lt;/code&amp;gt; is used * to create a thread, starting the thread causes the object&amp;#39;s * &amp;lt;code&amp;gt;run&amp;lt;/code&amp;gt; method to be called in that separately executing * thread.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E4%B8%89%E9%87%8D%E7%BD%AE%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E4%B8%89%E9%87%8D%E7%BD%AE%E7%89%88/</guid>
      <description>面向对象基础篇 我们在前面已经学习了面向过程编程，也可以自行编写出简单的程序了。我们接着就需要认识 面向对象程序设计（Object Oriented Programming）它是我们在Java语言中要学习的重要内容，面向对象也是高级语言的一大重要特性。
面向对象是新手成长的一道分水岭，有的人秒懂，有的人直到最后都无法理解。
这一章开始难度就上来了，所以说请各位小伙伴一定认真。
类与对象 类的概念我们在生活中其实已经听说过很多了。
人类、鸟类、鱼类&amp;hellip; 所谓类，就是对一类事物的描述，是抽象的、概念上的定义，比如鸟类，就泛指所有具有鸟类特征的动物。比如人类，不同的人，有着不同的性格、不同的爱好、不同的样貌等等，但是他们根本上都是人，所以说可以将他们抽象描述为人类。
对象是某一类事物实际存在的每个个体，因而也被称为实例（instance）我们每个人都是人类的一个实际存在的个体。
所以说，类就是抽象概念的人，而对象，就是具体的某一个人。
A：是谁拿走了我的手机？ B：是个人。（某一个类） A：我还知道是个人呢，具体是谁呢？ B：是XXX。（具体某个对象） 而我们在Java中，也可以像这样进行编程，我们可以定义一个类，然后进一步创建许多这个类的实例对象。像这种编程方式，我们称为面向对象编程。
类的定义与对象创建 前面我们介绍了什么是类，什么是对象，首先我们就来看看如何去定义一个类。
比如现在我们想要定义一个人类，我们可以右键src目录，点击创建新的类：
我们在对类进行命名时，一般使用英文单词，并且首字母大写，跟变量命名一样，不能出现任何的特殊字符。
可以看到，现在我们的目录下有了两个.java源文件，其中一个是默认创建的Main.java，还有一个是我们刚刚创建的类。
我们来看看创建好之后，一个类写了哪些内容：
public class Person { } 可以发现，这不是跟一开始创建的Main中写的格式一模一样吗？没错，Main也是一个类，只不过我们一直都将其当做主类在使用，也就是编写主方法的类，关于方法我们会在后面进行介绍。
现在我们就创建好了一个类，既然是人类，那么肯定有人相关的一些属性，比如名字、性别、年龄等等，那么怎么才能给这个类添加一些属性呢？
我们可以将这些属性直接作为类的成员变量（成员变量相当于是这个类所具有的属性，每个实例创建出来之后，这些属性都可能会各不相同）定义到类中。
public class Person { //这里定义的人类具有三个属性，名字、年龄、性别 String name; //直接在类中定义变量，表示类具有的属性 int age; String sex; } 可能会有小伙伴疑问，这些变量啥时候被赋值呢？实际上这些变量只有在一个具体的对象中才可以使用。
那么现在人类的属性都规定好了，我们就可以尝试创建一个实例对象了，实例对应的应该是一个具体的人：
new 类名(); public static void main(String[] args) { new Person(); //我们可以使用new关键字来创建某个类的对象，注意new后面需要跟上 类名() //这里创建出来的，就是一个具体的人了 } 实际上整个流程为：
只不过这里仅仅是创建出了这样的一个对象，我们目前没有办法去操作这个对象，比如想要修改或是获取这个人的名字等等。
对象的使用 既然现在我们知道如何创建对象，那么我们怎么去访问这个对象呢，比如我现在想要去查看或是修改它的名字。
我们同样可以使用一个变量来指代某个对象，只不过引用类型的变量，存储的是对象的引用，而不是对象本身：
public static void main(String[] args) { //这里的a存放的是具体的某个值 int a = 10; //创建一个变量指代我们刚刚创建好的对象，变量的类型就是对应的类名 //这里的p存放的是对象的引用，而不是本体，我们可以通过对象的引用来间接操作对象 Person p = new Person(); } 至于为什么对象类型的变量存放的是对象的引用，比如：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E4%BA%8C%E9%87%8D%E5%88%B6%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E4%BA%8C%E9%87%8D%E5%88%B6%E7%89%88/</guid>
      <description>面向过程篇 前面我们已经认识了Java语言的相关特性，并且已经成功配置好了开发环境，从这节课开始，我们就可以正式进入到Java语言的学习当中了。Java语言是一门面向对象的语言，但是在面向对象之前，我们还得先学会如何面向过程编程。
Java程序基础 首先我们还是从最基本的Java程序基础开始讲解。
程序代码基本结构 还记得我们之前使用的示例代码吗？
public class Main { public static void main(String[] args) { System.out.println(&amp;#34;Hello World!&amp;#34;); } } 这段代码要实现的功能很简单，就是将 Hello World 输出到控制台就行。
由于我们还没有学习到类的相关性质，所以在第二章之前，各位小伙伴直接记住固定模式即可，首先我们创建的源文件名称需要为Main.java然后编写的代码第一行：
public class Main { } 注意需要区分大小写，Java语言严格区分大小写，如果我们没有按照规则来编写，那么就会出现红色波浪线报错：
只要源代码中存在报错的地方，就无法正常完成编译得到二进制文件，会提示构建失败：
注意最后还有一个花括号，并且此花括号是成对出现的，一一对应。
所以说各位小伙伴在编写代码时一定要注意大小写。然后第二行，准确的说是最外层花括号内部就是：
public static void main(String[] args) { } 这是我们整个Java程序的入口点，我们称为主方法（如果你学习过C肯定能够联想到主函数，只不过Java中不叫函数，叫方法）最后也会有一个花括号成对出现，而在主方法的花括号中编写的代码，就是按照从上往下的顺序依次执行的。
比如我们之前编写的：
System.out.println(&amp;#34;Hello World!&amp;#34;); 这段代码的意思就是将双引号括起来的内容（字符串，我们会在后面进行讲解）输出（打印）到控制台上，可以看到最后还加上了一个;符号，表示这一句代码结束。我们每一段代码结束时都需要加上一个分号表示这一句的结束，就像我们写作文一样。
比如下面的代码，我们就可以实现先打印Hello World!，然后再打印YYDS!到控制台。
public class Main { public static void main(String[] args) { System.out.println(&amp;#34;Hello World!&amp;#34;); System.out.println(&amp;#34;YYDS!&amp;#34;); } } 效果如下：
如果两段代码没有加上分号分割，那么编译器会认为这两段代码是同一句代码中的，即使出现换行或者是空格：
这里IDEA很聪明，会提醒我们这里少加了分号，所以说这个IDEA能够在初期尽可能地帮助新手。
再比如下面的代码：
这里我们尝试在中途换行和添加空格，因为没有添加分号，所以说编译器依然会认为是一行代码，因此编译不会出现错误，能够正常通过。当然，为了代码写得工整和规范，我们一般不会随意进行换行编写或者是添加没必要的空格。
同样的，如果添加了分号，即使在同一行，也会被认为是两句代码：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E4%BA%94%E9%87%8D%E5%88%B6%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E4%BA%94%E9%87%8D%E5%88%B6%E7%89%88/</guid>
      <description>泛型程序设计 在前面我们学习了最重要的类和对象，了解了面向对象编程的思想，注意，非常重要，面向对象是必须要深入理解和掌握的内容，不能草草结束。在本章节，我们还会继续深入了解，从泛型开始，再到数据结构，最后再开始我们的集合类学习，循序渐进。
泛型 为了统计学生成绩，要求设计一个Score对象，包括课程名称、课程号、课程成绩，但是成绩分为两种，一种是以优秀、良好、合格 来作为结果，还有一种就是 60.0、75.5、92.5 这样的数字分数，可能高等数学这门课是以数字成绩进行结算，而计算机网络实验这门课是以等级进行结算，这两种分数类型都有可能出现，那么现在该如何去设计这样的一个Score类呢？
现在的问题就是，成绩可能是String类型，也可能是Integer类型，如何才能很好的去存可能出现的两种类型呢？
public class Score { String name; String id; Object value; //因为Object是所有类型的父类，因此既可以存放Integer也能存放String public Score(String name, String id, Object value) { this.name = name; this.id = id; this.score = value; } } 以上的方法虽然很好地解决了多种类型存储问题，但是Object类型在编译阶段并不具有良好的类型判断能力，很容易出现以下的情况：
public static void main(String[] args) { Score score = new Score(&amp;#34;数据结构与算法基础&amp;#34;, &amp;#34;EP074512&amp;#34;, &amp;#34;优秀&amp;#34;); //是String类型的 ... Integer number = (Integer) score.score; //获取成绩需要进行强制类型转换，虽然并不是一开始的类型，但是编译不会报错 } 使用Object类型作为引用，对于使用者来说，由于是Object类型，所以说并不能直接判断存储的类型到底是String还是Integer，取值只能进行强制类型转换，显然无法在编译期确定类型是否安全，项目中代码量非常之大，进行类型比较又会导致额外的开销和增加代码量，如果不经比较就很容易出现类型转换异常，代码的健壮性有所欠缺
所以说这种解决办法虽然可行，但并不是最好的方案。
为了解决以上问题，JDK 5新增了泛型，它能够在编译阶段就检查类型安全，大大提升开发效率。
泛型类 泛型其实就一个待定类型，我们可以使用一个特殊的名字表示泛型，泛型在定义时并不明确是什么类型，而是需要到使用时才会确定对应的泛型类型。
我们可以将一个类定义为一个泛型类：
public class Score&amp;lt;T&amp;gt; { //泛型类需要使用&amp;lt;&amp;gt;，我们需要在里面添加1 - N个类型变量 String name; String id; T value; //T会根据使用时提供的类型自动变成对应类型 public Score(String name, String id, T value) { //这里T可以是任何类型，但是一旦确定，那么就不能修改了 this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E5%85%AD%E9%87%8D%E5%88%B6%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E5%85%AD%E9%87%8D%E5%88%B6%E7%89%88/</guid>
      <description>集合类与IO 前面我们已经把基础介绍完了，从这节课开始，我们就正式进入到集合类的讲解中。
集合类 集合类是Java中非常重要的存在，使用频率极高。集合其实与我们数学中的集合是差不多的概念，集合表示一组对象，每一个对象我们都可以称其为元素。不同的集合有着不同的性质，比如一些集合允许重复的元素，而另一些则不允许，一些集合是有序的，而其他则是无序的。
集合类其实就是为了更好地组织、管理和操作我们的数据而存在的，包括列表、集合、队列、映射等数据结构。从这一块开始，我们会从源码角度给大家讲解（先从接口定义对于集合需要实现哪些功能开始说起，包括这些集合类的底层机制是如何运作的）不仅仅是教会大家如何去使用。
集合跟数组一样，可以表示同样的一组元素，但是他们的相同和不同之处在于：
它们都是容器，都能够容纳一组元素。 不同之处：
数组的大小是固定的，集合的大小是可变的。 数组可以存放基本数据类型，但集合只能存放对象。 数组存放的类型只能是一种，但集合可以有不同种类的元素。 集合根接口 Java中已经帮我们将常用的集合类型都实现好了，我们只需要直接拿来用就行了，比如我们之前学习的顺序表：
import java.util.ArrayList; //集合类基本都是在java.util包下定义的 public class Main { public static void main(String[] args) { ArrayList&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); list.add(&amp;#34;树脂666&amp;#34;); } } 当然，我们会在这一部分中认识大部分Java为我们提供的集合类。所有的集合类最终都是实现自集合根接口的，比如我们下面就会讲到的ArrayList类，它的祖先就是Collection接口：
这个接口定义了集合类的一些基本操作，我们来看看有哪些方法：
public interface Collection&amp;lt;E&amp;gt; extends Iterable&amp;lt;E&amp;gt; { //-------这些是查询相关的操作---------- //获取当前集合中的元素数量 int size(); //查看当前集合是否为空 boolean isEmpty(); //查询当前集合中是否包含某个元素 boolean contains(Object o); //返回当前集合的迭代器，我们会在后面介绍 Iterator&amp;lt;E&amp;gt; iterator(); //将集合转换为数组的形式 Object[] toArray(); //支持泛型的数组转换，同上 &amp;lt;T&amp;gt; T[] toArray(T[] a); //-------这些是修改相关的操作---------- //向集合中添加元素，不同的集合类具体实现可能会对插入的元素有要求， //这个操作并不是一定会添加成功，所以添加成功返回true，否则返回false boolean add(E e); //从集合中移除某个元素，同样的，移除成功返回true，否则false boolean remove(Object o); //-------这些是批量执行的操作---------- //查询当前集合是否包含给定集合中所有的元素 //从数学角度来说，就是看给定集合是不是当前集合的子集 boolean containsAll(Collection&amp;lt;?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E5%9B%9B%E9%87%8D%E5%88%B6%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://5Lin.github.io/posts/javase%E7%AC%94%E8%AE%B0%E5%9B%9B%E9%87%8D%E5%88%B6%E7%89%88/</guid>
      <description>面向对象高级篇 经过前面的学习，我们已经了解了面向对象编程的大部分基础内容，这一部分，我们将继续探索面向对象编程过程中一些常用的东西。
基本类型包装类 Java并不是纯面向对象的语言，虽然Java语言是一个面向对象的语言，但是Java中的基本数据类型却不是面向对象的。Java中的基本类型，如果想通过对象的形式去使用他们，Java提供的基本类型包装类，使得Java能够更好的体现面向对象的思想，同时也使得基本类型能够支持对象操作！
包装类介绍 所有的包装类层次结构如下：
其中能够表示数字的基本类型包装类，继承自Number类，对应关系如下表：
byte -&amp;gt; Byte boolean -&amp;gt; Boolean short -&amp;gt; Short char -&amp;gt; Character int -&amp;gt; Integer long -&amp;gt; Long float -&amp;gt; Float double -&amp;gt; Double 我们可以直接使用，这里我们以Integer类为例：
public static void main(String[] args) { Integer i = new Integer(10); //将10包装为一个Integer类型的变量 } 包装类实际上就是将我们的基本数据类型，封装成一个类（运用了封装的思想）我们可以来看看Integer类中是怎么写的：
private final int value; //类中实际上就靠这个变量在存储包装的值 public Integer(int value) { this.value = value; } 包装类型支持自动装箱，我们可以直接将一个对应的基本类型值作为对应包装类型引用变量的值：
public static void main(String[] args) { Integer i = 10; //将int类型值作为包装类型使用 } 这是怎么做到的？为什么一个对象类型的值可以直接接收一个基本类类型的值？实际上这里就是自动装箱：</description>
    </item>
    
  </channel>
</rss>
