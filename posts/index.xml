<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Lin&#39;s Blog || MuMu&#39;s Blog</title>
    <link>https://l50.top/posts/</link>
    <description>Recent content in Posts on Lin&#39;s Blog || MuMu&#39;s Blog</description>
    <image>
      <title>Lin&#39;s Blog || MuMu&#39;s Blog</title>
      <url>https://l50.top/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://l50.top/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Feb 2023 00:00:55 +0800</lastBuildDate><atom:link href="https://l50.top/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C 3</title>
      <link>https://l50.top/posts/c-3/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:55 +0800</pubDate>
      
      <guid>https://l50.top/posts/c-3/</guid>
      <description>C语言高级特性 前面我们了解了C语言的相关基础内容，我们来看看C语言的高级部分。这一章的学习难道会比较大，尤其是指针板块，因为需要理解计算机内存模型，所以说是很多初学者的噩梦。
函数 其实函数我们在一开始就在使用了：
int main() { //这是定义函数 ... } 我们程序的入口点就是main函数，我们只需要将我们的程序代码编写到主函数中就可以运行了，不够这个函数只是由我们来定义，而不是我们自己来调用。当然，除了主函数之外，我们一直在使用的printf也是一个函数，不过这个函数是标准库中已经实现好了的，现在是我们在调用这个函数：
printf(&amp;#34;Hello World!&amp;#34;); //直接通过 函数名称(参数...) 的形式调用函数 那么，函数的具体定义是什么呢？
函数是完成特定任务的独立程序代码单元。
其实简单来说，函数时为了完成某件任务而生的，可能我们要完成某个任务并不是一行代码就可以搞定的，但是现在可能会遇到这种情况：
#include &amp;lt;stdio.h&amp;gt; int main() { int a = 10; printf(&amp;#34;H&amp;#34;); //比如下面这三行代码就是我们要做的任务 printf(&amp;#34;A&amp;#34;); a += 10; if(a &amp;gt; 20) { printf(&amp;#34;H&amp;#34;); //这里我们还需要执行这个任务 printf(&amp;#34;A&amp;#34;); a += 10; } switch (a) { case 30: printf(&amp;#34;H&amp;#34;); //这里又要执行这个任务 printf(&amp;#34;A&amp;#34;); a += 10; } } 我们每次要做这个任务时，都要完完整整地将任务的每一行代码都写下来，如果我们的程序中多处都需要执行这个任务，每个地方都完整地写一遍，实在是太臃肿了，有没有一种更好的办法能优化我们的代码呢？
这时我们就可以考虑使用函数了，我们可以将我们的程序逻辑代码全部编写到函数中，当我们执行函数时，实际上执行的就是函数中的全部内容，也就是按照我们制定的规则执行对应的任务，每次需要做这个任务时，只需要调用函数即可。
我们来看看，如何创建和使用函数。
创建和使用函数 首先我们来看看如何创建一个函数，其实创建一个函数是很简单的，格式如下：
返回值类型 函数名称([函数参数...]); 其中函数名称也是有要求的，并不是所有的字符都可以用作函数名称，它的命名规则与变量的命名规则基本一致，所以这里就不一一列出了。
函数不仅仅需要完成我们的任务，可能某些函数还需要告诉我们结果，比如我们之前认识的getchar函数，这个函数实际上返回了一个int值作为结果（也就是我们输入的字符）我们同样可以将函数返回的结果赋值给变量或是参与运算等等。
当然如果我们的函数只需要完成任务，不需要告诉我们结果，返回值类型可以写成void表示为空。
函数参数我们放在下一个小节中讲解，所以这里我们不使用任何参数，所以这里也将参数设定为void表示没有参数（当然为了方便，我们也可以直接什么都不写）</description>
    </item>
    
    <item>
      <title>Java的jdk环境变量手动配置</title>
      <link>https://l50.top/posts/java%E7%9A%84jdk%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 26 Feb 2023 23:41:41 +0800</pubDate>
      
      <guid>https://l50.top/posts/java%E7%9A%84jdk%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE/</guid>
      <description>java的jdk环境变量手动配置（Windows11）
参考：https://blog.csdn.net/JUSTLOVEBOY/article/details/119373550
由于经常要配置环境变量那些，由于冲突或者不小心，可能会把原来配置的弄掉，又要重新配置，所以索性记录一下 第一次没有配置好不要着急，多试几次就好了，多配置几次你就会很熟悉了，正所谓万事开头难不用担心，仅仅配置了JDK，没有JRE！
以下是步骤： 鼠标右键 “此电脑” 选择属性，之后会出现一个弹窗，点击 “高级系统设置”
如下图：
点击 “环境变量” 然后会看到这样的画面： 关键是下面的内容，用户变量可以不用管：
至此你已经完成了所有的准备步骤，接下来就是环境配置了： 1.点击“新建”会出现一个弹窗： 变量名：JAVA_HOME 变量值：C:\Program Files\Java\jdk1.8.0_162(JDK的安装路径，这里以你自己的安装路径为准) 输入完成之后点确认，第一项配置就完成了，接下来进行第二步
2.新建CLASSPATH 变量，变量值为： .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar(注意前面是有一个点的)，配置好之后如下图，这里是可以复制粘贴的。 然后点确定保存变量，进入第三步
3.配置path,找到path，双击或者点编辑 然后可以看到path里面已经有很多内容了，我们在最后面新建一个： 输入 %JAVA_HOME%\bin 然后点确定保存，出去之后再点确定，然后再点确定，至此环境变量配置完毕，接下来就是测试环境变量配置有没有问题了。注意：一定是三次点击确认</description>
    </item>
    
    <item>
      <title>Hello,world</title>
      <link>https://l50.top/posts/helloworld/</link>
      <pubDate>Sun, 26 Feb 2023 23:00:58 +0800</pubDate>
      
      <guid>https://l50.top/posts/helloworld/</guid>
      <description>Hello,world!</description>
    </item>
    
  </channel>
</rss>
